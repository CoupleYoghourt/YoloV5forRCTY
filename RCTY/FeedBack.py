# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'suggest.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import ui.team.resource_rc
import ui.team.FeedBack_sort as FS
from ui.team.suggest import Ui_Form
from ui.team.kuazan import Ui_Form as Ui_Form_kuazan
from ui.team.tucao import Ui_Form as Ui_Form_tucao
from ui.team.jianyi import Ui_Form as Ui_Form_jianyi
from ui.team.qiuzhu import Ui_Form as Ui_Form_qiuzhu

import sys
from PyQt5.QtWidgets import QApplication,QLabel
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QMargins, Qt

from lib.share import SI

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *



class suggest_Form(QtWidgets.QMainWindow):

    def __init__(self, parent = None):
        super(suggest_Form, self).__init__(parent)
        self.ui = Ui_Form()
        self.ui.setupUi(self)

        self.init_slots()

    def init_slots(self):
        self.ui.pushButton_kuazan.clicked.connect(self.handleKuazan)
        self.ui.pushButton_tucao.clicked.connect(self.handleTucao)
        self.ui.pushButton_jianyi.clicked.connect(self.handleJianyi)
        self.ui.pushButton_qiuzhu.clicked.connect(self.handleQiuzhu)


    def handleKuazan(self):
        print("夸赞")
        self.kuazan_page = kuazan_Form()
        self.kuazan_page.show()

    def handleTucao(self):
        print("吐槽")
        self.tucao_page = tucao_Form()
        self.tucao_page.show()

    def handleJianyi(self):
        print("建议")
        self.jianyi_page = jianyi_Form()
        self.jianyi_page.show()

    def handleQiuzhu(self):
        print("求助")
        self.qiuzhu_page = qiuzhu_Form()
        self.qiuzhu_page.show()

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        self._endPos = e.pos() - self._startPos
        self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None


class kuazan_Form(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        super(kuazan_Form, self).__init__(parent)
        self.ui = Ui_Form_kuazan()
        self.ui.setupUi(self)

        self.init_slots()

    def init_slots(self):
        self.ui.pushButton.clicked.connect(self.tijiao)

    def tijiao(self):
        self.kuazan_text = self.ui.textEdit.toPlainText()
        print(self.kuazan_text)

        self.kuazan = FS.Suggest_part()
        kuazanRes = self.kuazan.CR_Res(0, self.kuazan_text, "夸赞", 1)

        if not kuazanRes:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"反馈失败，请重试！", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self, u"Notice", u"反馈成功！", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        self._endPos = e.pos() - self._startPos
        self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None

class jianyi_Form(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        super(jianyi_Form, self).__init__(parent)
        self.ui = Ui_Form_jianyi()
        self.ui.setupUi(self)

        self.init_slots()

    def init_slots(self):
        self.ui.pushButton.clicked.connect(self.tijiao)

    def tijiao(self):
        self.jianyi_text = self.ui.textEdit.toPlainText()
        print(self.jianyi_text)

        self.jianyi = FS.Suggest_part()
        jianyiRes = self.jianyi.CR_Res(0, self.jianyi_text, "建议", 2)

        if not jianyiRes:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"反馈失败，请重试！", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self, u"Notice", u"反馈成功！", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        self._endPos = e.pos() - self._startPos
        self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None


class tucao_Form(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        super(tucao_Form, self).__init__(parent)
        self.ui = Ui_Form_tucao()
        self.ui.setupUi(self)

        self.init_slots()

    def init_slots(self):
        self.ui.pushButton.clicked.connect(self.tijiao)

    def tijiao(self):
        self.tucao_text = self.ui.textEdit.toPlainText()
        print(self.tucao_text)

        self.tucao = FS.Suggest_part()
        tucaoRes = self.tucao.CR_Res(0, self.tucao_text, "吐槽", 3)

        if not tucaoRes:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"反馈失败，请重试！", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self, u"Notice", u"反馈成功！", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        self._endPos = e.pos() - self._startPos
        self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None

class qiuzhu_Form(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        super(qiuzhu_Form, self).__init__(parent)
        self.ui = Ui_Form_qiuzhu()
        self.ui.setupUi(self)

        self.init_slots()

    def init_slots(self):
        self.ui.pushButton.clicked.connect(self.tijiao)

    def tijiao(self):
        self.qiuzhu_text = self.ui.textEdit.toPlainText()
        print(self.qiuzhu_text)

        self.qiuzhu = FS.Suggest_part()
        qiuzhuRes = self.qiuzhu.CR_Res(0, self.qiuzhu_text, "求助", 4)

        if not qiuzhuRes:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"反馈失败，请重试！", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self, u"Notice", u"反馈成功！", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        self._endPos = e.pos() - self._startPos
        self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None

if __name__ == '__main__':
    app=QApplication(sys.argv)
    SI.suggestWin.show()
    sys.exit(app.exec_())